.intro img,
.gif img, .testimonial {
  -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 0 0 rgba(152, 85, 194, 0.1);
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 0 0 rgba(152, 85, 194, 0.1); }

/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

html,
body {
  cursor: default;
  height: 100%; }

html {
  font-size: 62.5%; }

body {
  font: 400 1.6rem / 1.4 "Source Sans Pro", sans-serif;
  color: #222;
  -webkit-text-size-adjust: 100%;
  -webkit-font-feature-settings: "kern" 1;
  -moz-font-feature-settings: "kern" 1;
  -o-font-feature-settings: "kern" 1;
  font-feature-settings: "kern" 1;
  -webkit-font-kerning: normal;
     -moz-font-kerning: normal;
          font-kerning: normal; }

h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
ul, ol, dl, figure,
.highlight {
  margin-bottom: 15px; }

img {
  max-width: 100%;
  vertical-align: middle; }

figure > img {
  display: block; }

figcaption {
  font-size: 1.4rem; }

ul, ol {
  margin-left: 30px; }

li > ul,
li > ol {
  margin-bottom: 0; }

h1, h2, h3, h4, h5, h6 {
  font-weight: 400; }

a {
  color: #222;
  text-decoration: none; }
  a:visited {
    color: black; }
  a:hover {
    color: #3c3c3c;
    text-decoration: underline; }

blockquote {
  color: #555;
  border-left: 4px solid #bbbbbb;
  padding-left: 15px;
  font-size: 18px;
  letter-spacing: -1px;
  font-style: italic; }
  blockquote > :last-child {
    margin-bottom: 0; }

pre,
code {
  font-size: 15px;
  border: 1px solid #bbbbbb;
  -webkit-border-radius: 3px;
          border-radius: 3px;
  background-color: #eef; }

code {
  padding: 1px 5px; }

pre {
  padding: 8px 12px;
  overflow-x: auto; }
  pre > code {
    border: 0;
    padding-right: 0;
    padding-left: 0; }

/**
 * Syntax highlighting styles
 */
.highlight {
  background: #fff; }
  .highlighter-rouge .highlight {
    background: #eef; }
  .highlight .c {
    color: #998;
    font-style: italic; }
  .highlight .err {
    color: #a61717;
    background-color: #e3d2d2; }
  .highlight .k {
    font-weight: bold; }
  .highlight .o {
    font-weight: bold; }
  .highlight .cm {
    color: #998;
    font-style: italic; }
  .highlight .cp {
    color: #999;
    font-weight: bold; }
  .highlight .c1 {
    color: #998;
    font-style: italic; }
  .highlight .cs {
    color: #999;
    font-weight: bold;
    font-style: italic; }
  .highlight .gd {
    color: #000;
    background-color: #fdd; }
  .highlight .gd .x {
    color: #000;
    background-color: #faa; }
  .highlight .ge {
    font-style: italic; }
  .highlight .gr {
    color: #a00; }
  .highlight .gh {
    color: #999; }
  .highlight .gi {
    color: #000;
    background-color: #dfd; }
  .highlight .gi .x {
    color: #000;
    background-color: #afa; }
  .highlight .go {
    color: #888; }
  .highlight .gp {
    color: #555; }
  .highlight .gs {
    font-weight: bold; }
  .highlight .gu {
    color: #aaa; }
  .highlight .gt {
    color: #a00; }
  .highlight .kc {
    font-weight: bold; }
  .highlight .kd {
    font-weight: bold; }
  .highlight .kp {
    font-weight: bold; }
  .highlight .kr {
    font-weight: bold; }
  .highlight .kt {
    color: #458;
    font-weight: bold; }
  .highlight .m {
    color: #099; }
  .highlight .s {
    color: #d14; }
  .highlight .na {
    color: #008080; }
  .highlight .nb {
    color: #0086B3; }
  .highlight .nc {
    color: #458;
    font-weight: bold; }
  .highlight .no {
    color: #008080; }
  .highlight .ni {
    color: #800080; }
  .highlight .ne {
    color: #900;
    font-weight: bold; }
  .highlight .nf {
    color: #900;
    font-weight: bold; }
  .highlight .nn {
    color: #555; }
  .highlight .nt {
    color: #000080; }
  .highlight .nv {
    color: #008080; }
  .highlight .ow {
    font-weight: bold; }
  .highlight .w {
    color: #bbb; }
  .highlight .mf {
    color: #099; }
  .highlight .mh {
    color: #099; }
  .highlight .mi {
    color: #099; }
  .highlight .mo {
    color: #099; }
  .highlight .sb {
    color: #d14; }
  .highlight .sc {
    color: #d14; }
  .highlight .sd {
    color: #d14; }
  .highlight .s2 {
    color: #d14; }
  .highlight .se {
    color: #d14; }
  .highlight .sh {
    color: #d14; }
  .highlight .si {
    color: #d14; }
  .highlight .sx {
    color: #d14; }
  .highlight .sr {
    color: #009926; }
  .highlight .s1 {
    color: #d14; }
  .highlight .ss {
    color: #990073; }
  .highlight .bp {
    color: #999; }
  .highlight .vc {
    color: #008080; }
  .highlight .vg {
    color: #008080; }
  .highlight .vi {
    color: #008080; }
  .highlight .il {
    color: #099; }

img {
  opacity: 1;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s; }
  img[data-src] {
    opacity: 0; }

.wrapper {
  background-color: #f9f9f9;
  width: 100%; }

.hero-wrapper {
  background: -webkit-gradient(linear, left top, left bottom, from(#7047A3), to(#3A276A));
  background: -webkit-linear-gradient(top, #7047A3 0%, #3A276A 100%);
  background: linear-gradient(to bottom, #7047A3 0%, #3A276A 100%);
  padding: 0 20px 40px;
  width: 100%; }

.hero-container {
  color: #fff;
  overflow: hidden; }

.hero-header {
  font-family: "Source Sans Pro", sans-serif;
  font-size: 4.2rem;
  font-weight: 200;
  line-height: 1.2;
  margin: 45px 0 90px;
  text-align: center; }
  @media (min-width: 768px) {
    .hero-header {
      font-size: 6.2rem; } }

.hero-sub {
  font-size: 2.2rem;
  font-weight: 700;
  letter-spacing: 0.5px;
  margin: 0 0 120px;
  text-align: center;
  text-transform: uppercase; }
  @media (min-width: 768px) {
    .hero-sub {
      font-size: 3.2rem; } }

.hero-example {
  width: 66.10169%;
  float: left;
  margin-right: 1.69492%;
  margin-left: 16.94915%;
  margin-right: 16.94915%;
  overflow: hidden;
  margin-bottom: 60px; }
  @media (min-width: 768px) {
    .hero-example {
      width: 32.20339%;
      float: left;
      margin-right: 1.69492%;
      margin-left: 33.89831%;
      margin-right: 33.89831%; } }
  @media (min-width: 1025px) {
    .hero-example {
      width: 15.25424%;
      float: left;
      margin-right: 1.69492%;
      margin-left: 42.37288%;
      margin-right: 42.37288%; } }

.scale {
  display: inline-block;
  -webkit-animation-name: scaleIn;
          animation-name: scaleIn;
  -webkit-animation-duration: .5s;
          animation-duration: .5s;
  -webkit-animation-delay: 1s;
          animation-delay: 1s; }

@-webkit-keyframes scaleIn {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

@keyframes scaleIn {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

.ex-box {
  float: left;
  font-size: 2.2rem;
  width: 50%; }
  .ex-box > div:first-child {
    margin-bottom: 13px; }

.original-text,
.replace-text {
  font-weight: 600;
  padding-left: 25%; }

.email {
  display: none;
  color: #86D8DC;
  font-size: 1.4rem;
  text-align: center; }
  .email a {
    color: #86D8DC;
    text-decoration: underline; }
  @media (min-width: 768px) {
    .email {
      font-size: 1.8rem; } }

.install {
  padding: 50px 0;
  text-align: center; }
  .install p {
    margin: 0; }

.chrome-webstore {
  margin-top: 30px;
  width: 200px; }

.typed-cursor {
  opacity: 1;
  -webkit-animation: blink 0.7s infinite;
          animation: blink 0.7s infinite; }

@-webkit-keyframes blink {
  0% {
    opacity: 1; }
  50% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes blink {
  0% {
    opacity: 1; }
  50% {
    opacity: 0; }
  100% {
    opacity: 1; } }

.section {
  overflow: hidden;
  padding: 20px; }
  @media (min-width: 768px) {
    .section {
      padding: 30px 0; } }
  @media (min-width: 1024px) {
    .section {
      padding: 80px 0; } }
  .section:nth-child(odd) {
    background-color: #fff; }

@media (min-width: 768px) {
  .wtf-box {
    font-size: 2rem;
    margin: 0 auto;
    width: 65%; } }

@media (min-width: 768px) {
  .wtf-box {
    margin: 0 auto;
    width: 50%; } }

.box {
  margin: 0 auto; }
  @media (min-width: 768px) {
    .box {
      -webkit-box-align: center;
      -webkit-align-items: center;
          -ms-flex-align: center;
              align-items: center;
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: justify;
      -webkit-justify-content: space-between;
          -ms-flex-pack: justify;
              justify-content: space-between;
      max-width: 1440px;
      width: 90%; } }

@media (min-width: 768px) {
  .intro,
  .gif {
    width: 48%; } }

.section-heading {
  font-weight: 700; }
  @media (min-width: 768px) {
    .section-heading {
      font-size: 3rem;
      margin: 0 0 30px;
      text-align: center; } }

.case-heading {
  color: #86D8DC;
  font-size: 2.4rem;
  font-weight: 700;
  margin-top: 2vh; }
  @media (min-width: 768px) {
    .case-heading {
      font-size: 4.6rem; } }

.testimonial {
  background-color: #fff;
  -webkit-border-radius: 2px;
          border-radius: 2px;
  margin-bottom: 50px;
  padding: 50px 20px 30px; }
  @media (min-width: 768px) {
    .testimonial {
      padding: 65px 30px 30px;
      margin-bottom: 0; } }
  .testimonial:nth-child(odd) {
    background-color: #f9f9f9; }

.testimonial-pic {
  -webkit-border-radius: 50%;
          border-radius: 50%;
  display: block;
  height: 50px;
  margin: 0 auto;
  position: relative;
  top: 25px;
  width: 50px; }
  @media (min-width: 768px) {
    .testimonial-pic {
      height: 100px;
      top: 50px;
      width: 100px; } }

.meta {
  font-style: italic;
  font-weight: 600;
  margin: 0;
  text-align: center; }

.testimonial-text {
  margin-top: 30px; }

.response {
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 20px 0; }
  @media (min-width: 768px) {
    .response {
      font-size: 2rem;
      margin: 50px auto 0;
      width: 65%; } }

.emoji {
  font-size: 4rem;
  margin-right: 15px; }
  @media (min-width: 768px) {
    .emoji {
      font-size: 8rem;
      margin-right: 30px; } }

/*# sourceMappingURL=data:application/json;base64, */
